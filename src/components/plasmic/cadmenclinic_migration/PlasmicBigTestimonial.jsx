/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: qZkEECWSrv1-
import * as React from "react";
import Image from 'next/image'
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicBigTestimonial.module.css"; // plasmic-import: qZkEECWSrv1-/css

createPlasmicElementProxy;

export const PlasmicBigTestimonial__VariantProps = new Array("image");

export const PlasmicBigTestimonial__ArgProps = new Array(
  "quote",
  "author",
  "handle",
  "handleLink",
  "avatar",
  "children",
  "avatar2"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBigTestimonial__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "image",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.image
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootimage]: hasVariant($state, "image", "image") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___1G5Bv, {
          [sty.freeBoximage___1G5BvZoYyX]: hasVariant($state, "image", "image")
        })}
      >
        <div style={{marginBottom: "20px"}}>
          <Image src='/graphics/5-stars.svg' width={160} height={27} alt='5 stars' />
        </div>


        <p
          className={classNames(
            projectcss.all,
            projectcss.p,
            projectcss.__wab_text,
            sty.p__pFvm6,
            { [sty.pimage__pFvm6ZoYyX]: hasVariant($state, "image", "image") }
          )
        }
        >
          <React.Fragment>
            <p dangerouslySetInnerHTML={{ __html: $props.quote }}></p>
          </React.Fragment>
        </p>
        <Image style={{marginTop: "15px"}} src='/graphics/google-icon.svg' width={38} height={54} alt='Google icon' />

        {/* NEEDS TO BE REMOVED */}
        <div
          className={classNames(projectcss.all, sty.freeBox__fqEdR, {
            [sty.freeBoximage__fqEdRZoYyX]: hasVariant($state, "image", "image")
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wmGnf, {
              [sty.freeBoximage__wmGnfZoYyX]: hasVariant(
                $state,
                "image",
                "image"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__oBOmz, {
                [sty.freeBoximage__oBOmzZoYyX]: hasVariant(
                  $state,
                  "image",
                  "image"
                )
              })}
            >              

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xolKg, {
                  [sty.freeBoximage__xolKgZoYyX]: hasVariant(
                    $state,
                    "image",
                    "image"
                  )
                })}
              >
                {(hasVariant($state, "image", "image") ? false : true)
                  ? renderPlasmicSlot({
                      defaultContents: (
                        <Image src='/graphics/google-icon.svg' width={24} height={24} alt='Google icon' />
                      ),

                      value: args.avatar
                    })
                  : null}
              </Stack__>
            </div>
          </Stack__>
        </div>
      </div>
      
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__d9Et4, {
            [sty.freeBoximage__d9Et4ZoYyX]: hasVariant($state, "image", "image")
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yy3Av, {
              [sty.freeBoximage__yy3AvZoYyX]: hasVariant(
                $state,
                "image",
                "image"
              )
            })}
          >
          </Stack__>
        </Stack__>
      ) : null}
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBigTestimonial__ArgProps,
          internalVariantPropNames: PlasmicBigTestimonial__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBigTestimonial__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBigTestimonial";
  } else {
    func.displayName = `PlasmicBigTestimonial.${nodeName}`;
  }
  return func;
}

export const PlasmicBigTestimonial = Object.assign(
  // Top-level PlasmicBigTestimonial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicBigTestimonial
    internalVariantProps: PlasmicBigTestimonial__VariantProps,
    internalArgProps: PlasmicBigTestimonial__ArgProps
  }
);

export default PlasmicBigTestimonial;
/* prettier-ignore-end */
